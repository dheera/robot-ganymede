#!/usr/bin/env node
"use strict";

const sshpk = require('sshpk');
const fs = require('fs');
const os = require('os');
const io = require('socket.io-client');
const ros = require('rosnodejs');
const geometry_msgs = ros.require('geometry_msgs');

const remoteConfig = {
  "name": "ganymede",
  "ui": {
    "fixed": [
       {
         "type": "stick",
         "name": "stick0",
         "aspectRatio": 1.0,
       }
    ]
  }
}

// ssh

let publicKeyText = fs.readFileSync(os.homedir() + '/.ssh/id_rsa.pub');
let privateKeyText = fs.readFileSync(os.homedir() + '/.ssh/id_rsa');
let publicKey = sshpk.parseKey(publicKeyText, 'ssh');
let privateKey = sshpk.parsePrivateKey(privateKeyText, 'ssh');

// ros init
ros.initNode('remote_node').then(() => {
  console.log("ros node initialized")
});
const nh = ros.nh;

// subscribers

const sub = nh.subscribe('/rosout', 'rosgraph_msgs/Log', (msg) => {
  socket.emit('rosout', msg);
});

// publishers

const pub_motion = nh.advertise('/motion/level2', 'geometry_msgs/Twist')

// socket.io

var socket = io('https://robot.dheera.net/robot');

socket.on('connect', () => {
  console.log('connect');

  socket.emit('auth_fingerprint', publicKey.fingerprint().toString());
});

socket.on('auth_verify', (msg, callback) => {
  if(!msg.data) {
    console.log('did not receive data to sign');
    return;
  }

  let s = privateKey.createSign('sha256');
  s.update(msg.data);
  let signature = s.sign();
  console.log(signature);
  callback({signature: signature.toString(), type: signature.type});
});

socket.on('disconnect', () => {
  console.log('disconnect');
});

/*
io.of("/robot").on('connection', (socket) => {
  console.log('connection');

  socket.emit("auth", {});

  var interval = setInterval(() => {
     socket.emit("status", {});
  }, 3000);

  socket.on("stick0", (msg) => {
    let t = new geometry_msgs.msg.Twist();
    if(!(typeof(msg[0]) === "number")) return;
    if(!(typeof(msg[1]) === "number")) return;
    if(!(typeof(msg[2]) === "number")) return;

    t.linear.x = msg[0] || 0.0;
    t.linear.y = msg[1] || 0.0;
    t.angular.z = msg[2] || 0.0;
    pub_motion.publish(t);
  });
});
*/
